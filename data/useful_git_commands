Посмотреть все настройки git:
    git config --global --list

Get status:
    git status

Removes a file from version control:
    git rm --cached <file>

Recursively removes files/folders from a directory from version control:
    git rm -r --cached <dir>

Adds all untracked files to version control (filtering by .gitignore)
    git add --all

Stop tracking changes for a specific file/folder:
    git update-index --assume-unchanged <file/folder>

Undo the previous step:
    git update-index --no-assume-unchanged <file/folder>

If any error with Pull - file "would be changed after pull" - drops local changes for this file
    git checkout HEAD^ file/to/overwrite
    git pull

Создать файл:
    touch file <name>

Создать новый репозиторий:
    git init project-name

Если вы планируете клонировать его по ssh с удаленной машины, также скажите:
    git config --bool core.bare true

… иначе при git push вы будете получать странные ошибки вроде:
    Refusing to update checked out branch: refs/heads/master
    By default, updating the current branch in a non-bare repository
    is denied, because it will make the index and work tree inconsistent
    with what you pushed, and will require 'git reset --hard' to match
    the work tree to HEAD.

Клонировать репозиторий с удаленной машины:
    git clone git@bitbucket.org:afiskon/hs-textgen.git

Если хотим пушить один код в несколько репозиториев:
    git remote add remotename git@gitlab.example.ru:repo.git

Добавить файл в репозиторий:
    git add text.txt
    git add .

Удалить файл:
    git rm text.txt

Вернуть файлы бодкотовленные для коммита
    git rm --cached

Текущее состояние репозитория (изменения, неразрешенные конфликты и тп):
    git status

Сделать коммит:
    git commit -a -m "Commit description"

Сделать коммит, введя его описание с помощью $EDITOR:
    git commit -a

Замерджить все ветки локального репозитория на удаленный репозиторий (аналогично вместо origin можно указать и remotename, см выше):
    git push origin

Аналогично предыдущему, но делается пуш только ветки master:
    git push origin master

Запушить текущую ветку, не вводя целиком ее название:
    git push origin HEAD

Замерджить все ветки с удаленного репозитория:
    git pull origin

Аналогично предыдущему, но накатывается только ветка master:
    git pull origin master

Накатить текущую ветку, не вводя ее длинное имя:
    git pull origin HEAD

Скачать все ветки с origin, но не мерджить их в локальный репозиторий:
    git fetch origin

Аналогично предыдущему, но только для одной заданной ветки:
    git fetch origin master

Начать работать с веткой some_branch (уже существующей):
    git checkout -b some_branch origin/some_branch

Создать новый бранч (ответвится от текущего):
    git branch some_branch

Переключиться на другую ветку (из тех, с которыми уже работаем):
    git checkout some_branch

Получаем список веток, с которыми работаем:
    git branch # звездочкой отмечена текущая ветвь

Просмотреть все существующие ветви:
    git branch -a # | grep something

Замерджить some_branch в текущую ветку:
    git merge some_branch

Удалить бранч (после мерджа):
    git branch -d some_branch

Просто удалить бранч (тупиковая ветвь):
    git branch -D some_branch

История изменений:
    git log

История изменений в обратном порядке:
    git log --reverse

История конкретного файла:
    git log file.txt

Аналогично предыдущему, но с просмотром сделанных изменений:
    git log -p file.txt

История с именами файлов и псевдографическим изображением бранчей:
    git log --stat --graph

    git log --oneline --stat --patch -p -w SHA -decorate --graph --all
    git log --author=name
    git shortlog -s -n
    git log --grep=text
    git log --grep text

Изменения, сделанные в заданном коммите:
    git show d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Посмотреть, кем в последний раз правилась каждая строка файла:
    git blame file.txt

Удалить бранч из репозитория на сервере:
    git push origin :branch-name

Откатиться к конкретному коммиту (хэш смотрим в «git log»):
    git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Аналогично предыдущему, но файлы на диске остаются без изменений:
    git reset --soft d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Попытаться обратить заданный commit (но чаще используется branch/reset + merge):
    git revert d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Просмотр изменений (суммарных, а не всех по очереди, как в «git log»):
    git diff # подробности см в "git diff --help"

Используем vimdiff в качестве программы для разрешения конфликтов (mergetool) по умолчанию:
    git config --global merge.tool vimdiff

Отключаем диалог «какой mergetool вы хотели бы использовать»:
    git config --global mergetool.prompt false

Отображаем табы как 4 пробела, например, в «git diff»:
    git config --global core.pager 'less -x4'

Создание глобального файла .gitignore:
    git config --global core.excludesfile ~/.gitignore_global

Разрешение конфликтов (когда оные возникают в результате мерджа):
    git mergetool

Создание тэга:
    git tag some_tag # за тэгом можно указать хэш коммита
    git tag -a text

Удалить тег
    git tag -d text

Удаление untracked files:
    git clean -f

Объединить коммиты в один
    get rebase -I HEAD~3

